/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Dot2Dot.jj */
/*@egen*/options{  JDK_VERSION = "1.7";  LOOKAHEAD= 1;  static = false;                  }PARSER_BEGIN(Dot2DotParser)package mieic.comp.parsing;import java.io.*;public class Dot2DotParser/*@bgen(jjtree)*/implements Dot2DotParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTDot2DotParserState jjtree = new JJTDot2DotParserState();

/*@egen*/  public static boolean parse(String args [])  {    Dot2DotParser parser = null;    if (args.length == 0)    {      System.out.println("Dot2Dot:  Reading from standard input . . .");      parser = new Dot2DotParser(System.in);    }    else if (args.length == 1)    {      System.out.println("Dot2Dot:  Reading from file " + args [0] + " . . .");      try      {        parser = new Dot2DotParser(new java.io.FileInputStream(args [0]));      }      catch (java.io.FileNotFoundException e)      {        System.out.println("Java Parser Version 1.1:  File " + args [0] + " not found.");        return;      }    }    else    {      System.out.println("Dot2Dot:  Usage is one of:");      System.out.println("         java dot2dot < inputfile");      System.out.println("OR");      System.out.println("         java dot2dot inputfile");      return;    }    try    {      /*parser.CompilationUnit();      System.out.println("Dot2Dot:  Java program parsed successfully.");*/      SimpleNode root = parser.Start();      root.dump("");      return true;    }    catch (ParseException e)     {      System.out.println(e.getMessage());      System.out.println("Dot2Dot:  Encountered errors during parse.");      return false;    }  }}PARSER_END(Dot2DotParser)SKIP :{  " "| "\t"| < "\n\35" ~[ "\n" ] "\n" >| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < STRICT :    "strict"  | "STRICT" >| < GRAPH :    "graph"  | "GRAPH" >| < DIGRAPH :    "digraph"  | "DIGRAPH" >| < NODE :    "node"  | "NODE" >| < EDGE :    "edge"  | "EDGE" >| < SUBGRAPH :    "subgraph"  | "SUBGRAPH" >| < DIRECTION :    "n"  | "s"  | "w"  | "e"  | "nw"  | "ne"  | "sw"  | "se"  | "c"  | "_" >| < EDGEOP :    "--"  | "->" >}TOKEN : /* IDENTIFIERS */{  < ID :    (      < LETTER >      (        < LETTER >      | < DIGIT >      )*    )  | < STRING >  | < NUMERAL >  | < HTML >>| < #LETTER : [ "_", "a"-"z", "A"-"Z", "\200"-"\377" ] >| < #DIGIT : [ "0"-"9" ] >| < #NUMERAL :    ("-")?    (      "." (< DIGIT >)+    | (< DIGIT >)+      (        "." (< DIGIT >)+      )?    ) >| < #STRING :    "\""    (      "\\\""    | ~[ "\"" ]    )+    (      "\""    | "\\\""    ) >| < #HTML :    (      "<"      (        "<" (~[ ">" ])* ">" (~[ "<", ">" ])*      )*      ">"    ) >}SimpleNode Start() :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  graph()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void graph()      :{}{  (< STRICT >)?  (    < GRAPH >  | < DIGRAPH >  )  (< ID >)? "{"  (    (      stmt_list()    )?  )  "}"}void stmt_list()      :{}{  stmt() (";")?  (    stmt_list()  )?}void stmt()      :{}{  attr_stmt()| < ID >  (    edge_stmt()  | "=" < ID >  |    (      port()    )?    (      node_stmt()    )?  )| subgraph()  (    edge_stmt()  )?}void node_stmt()      :{}{  attr_list()}void node_id()      :{}{  < ID >  (    port()  )?}void port()      :{}{  ":"  (    < ID > (":" < DIRECTION >)?  | < DIRECTION >  )}void attr_list()      :{}{  "["  (    a_list()  )?  "]"  (    attr_list()  )?}void a_list()      :{}{  < ID > "=" < ID >  (    ";"  | ","  )?  (    a_list()  )?}void edge_stmt()      :{}{  edgeRHS()  (    attr_list()  )?}void edgeRHS()      :{}{  < EDGEOP >  (    node_id()  | subgraph()  )  (    edgeRHS()  )?}void attr_stmt()      :{}{  < GRAPH > attr_list()| < NODE > attr_list()| < EDGE > attr_list()}void subgraph()       :{}{  (    < SUBGRAPH > (< ID >)?  )?  "{" stmt_list() "}"}