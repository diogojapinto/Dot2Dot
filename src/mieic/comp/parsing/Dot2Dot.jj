/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Dot2Dot.jj */
/*@egen*/options{  JDK_VERSION = "1.7";  LOOKAHEAD= 1;  static = false;               }PARSER_BEGIN(Dot2DotParser)package mieic.comp.parsing;import java.io.*;public class Dot2DotParser/*@bgen(jjtree)*/implements Dot2DotParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTDot2DotParserState jjtree = new JJTDot2DotParserState();

/*@egen*/  public static void parse(String args [])  {    Dot2DotParser parser = null;    if (args.length == 0)    {      System.out.println("Dot2Dot:  Reading from standard input . . .");      parser = new Dot2DotParser(System.in);    }    else if (args.length == 1)    {      System.out.println("Dot2Dot:  Reading from file " + args [0] + " . . .");      try      {        parser = new Dot2DotParser(new java.io.FileInputStream(args [0]));      }      catch (java.io.FileNotFoundException e)      {        System.out.println("Java Parser Version 1.1:  File " + args [0] + " not found.");        return;      }    }    else    {      System.out.println("Dot2Dot:  Usage is one of:");      System.out.println("         java dot2dot < inputfile");      System.out.println("OR");      System.out.println("         java dot2dot inputfile");      return;    }    try    {      /*parser.CompilationUnit();      System.out.println("Dot2Dot:  Java program parsed successfully.");*/      SimpleNode root = parser.Start();      root.dump("");    }    catch (ParseException e)    {      System.out.println(e.getMessage());      System.out.println("Dot2Dot:  Encountered errors during parse.");    }  }}PARSER_END(Dot2DotParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < STRICT :    "strict"  | "STRICT" >| < GRAPH :    "graph"  | "GRAPH" >| < DIGRAPH :    "digraph"  | "DIGRAPH" >| < NODE :    "node"  | "NODE" >| < EDGE :    "edge"  | "EDGE" >| < SUBGRAPH :    "subgraph"  | "SUBGRAPH" >| < DIRECTION :    "n"  | "s"  | "w"  | "e"  | "nw"  | "ne"  | "sw"  | "se"  | "_" >| < EDGEOP :    "--"  | "->" >}TOKEN : /* IDENTIFIERS */{  < ID :    (      < LETTER >      (        < LETTER >      | < DIGIT >      )*    )  | < STRING >  | < DIGIT >  | < HTML >>| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >| < #STRING :    (      "\""    | "\\\""    )    (~[ "\"" ])+    (      "\""    | "\\\""    ) >| < #HTML :    (      "<"      (        "<" (~[ ">" ])* ">" (~[ "<", ">" ])*      )*      ">"    ) >}SimpleNode Start() :{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  graph()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void graph() :{/*@bgen(jjtree) graph */
  ASTgraph jjtn000 = new ASTgraph(JJTGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) graph */
  try {
/*@egen*/  (< STRICT >)?  (    < GRAPH >  | < DIGRAPH >  )  (< ID >)? "{"  (    (      stmt_list()    )?  )  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void stmt_list() :{/*@bgen(jjtree) stmt_list */
  ASTstmt_list jjtn000 = new ASTstmt_list(JJTSTMT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) stmt_list */
  try {
/*@egen*/  stmt() (";")?  (    stmt_list()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }void stmt() :{/*@bgen(jjtree) stmt */
  ASTstmt jjtn000 = new ASTstmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) stmt */
  try {
/*@egen*/  attr_stmt()| < ID >  (    edge_stmt()  | a_list_aux()  |    (      port()    )?    (      node_stmt()    )?  )| subgraph()  (    edge_stmt()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void node_stmt() :{/*@bgen(jjtree) node_stmt */
  ASTnode_stmt jjtn000 = new ASTnode_stmt(JJTNODE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) node_stmt */
  try {
/*@egen*/  attr_list()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void node_id() :{/*@bgen(jjtree) node_id */
  ASTnode_id jjtn000 = new ASTnode_id(JJTNODE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) node_id */
  try {
/*@egen*/  < ID >  (    port()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void port() :{/*@bgen(jjtree) port */
  ASTport jjtn000 = new ASTport(JJTPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) port */
  try {
/*@egen*/  ":"  (    < ID > (":" < DIRECTION >)?  | < DIRECTION >  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void attr_list() :{/*@bgen(jjtree) attr_list */
  ASTattr_list jjtn000 = new ASTattr_list(JJTATTR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) attr_list */
  try {
/*@egen*/  "["  (    a_list()  )?  "]"  (    attr_list()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void a_list() :{/*@bgen(jjtree) a_list */
  ASTa_list jjtn000 = new ASTa_list(JJTA_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) a_list */
  try {
/*@egen*/  < ID > "=" < ID >  (    ";"  | ","  )?  (    a_list()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void a_list_aux() :{/*@bgen(jjtree) a_list_aux */
  ASTa_list_aux jjtn000 = new ASTa_list_aux(JJTA_LIST_AUX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) a_list_aux */
  try {
/*@egen*/  "=" < ID > ";"  (    a_list_aux()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void edge_stmt() :{/*@bgen(jjtree) edge_stmt */
  ASTedge_stmt jjtn000 = new ASTedge_stmt(JJTEDGE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) edge_stmt */
  try {
/*@egen*/  edgeRHS()  (    attr_list()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void edgeRHS() :{/*@bgen(jjtree) edgeRHS */
  ASTedgeRHS jjtn000 = new ASTedgeRHS(JJTEDGERHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) edgeRHS */
  try {
/*@egen*/  < EDGEOP >  (    node_id()  | subgraph()  )  (    edgeRHS()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void attr_stmt() :{/*@bgen(jjtree) attr_stmt */
  ASTattr_stmt jjtn000 = new ASTattr_stmt(JJTATTR_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) attr_stmt */
  try {
/*@egen*/  < GRAPH > attr_list()| < NODE > attr_list()| < EDGE > attr_list()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void subgraph() :{/*@bgen(jjtree) subgraph */
  ASTsubgraph jjtn000 = new ASTsubgraph(JJTSUBGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) subgraph */
  try {
/*@egen*/  (    < SUBGRAPH > (< ID >)?  )?  "{" stmt_list() "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}