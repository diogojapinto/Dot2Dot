/* Generated By:JJTree&JavaCC: Do not edit this line. Dot2DotParser.java */
package mieic.comp.parser;
import java.io.*;

public class Dot2DotParser/*@bgen(jjtree)*/implements Dot2DotParserTreeConstants, Dot2DotParserConstants {/*@bgen(jjtree)*/
  protected JJTDot2DotParserState jjtree = new JJTDot2DotParserState();public static boolean parse(String args [])
  {
    Dot2DotParser parser = null;
    if (args.length == 0)
    {
      System.out.println("Dot2Dot:  Reading from standard input . . .");
      parser = new Dot2DotParser(System.in);
    }
    else if (args.length == 1)
    {
      System.out.println("Dot2Dot:  Reading from file " + args [0] + " . . .");
      try
      {
        parser = new Dot2DotParser(new java.io.FileInputStream(args [0]));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Java Parser Version 1.1:  File " + args [0] + " not found.");
        return false;
      }
    }
    else
    {
      System.out.println("Dot2Dot:  Usage is one of:");
      System.out.println("         java dot2dot < inputfile");
      System.out.println("OR");
      System.out.println("         java dot2dot inputfile");
      return false;
    }
    try
    {
      SimpleNode root = parser.Start();
      root.dump("");
      return true;
    }
    catch (ParseException e)
    {
      System.out.println(e.getMessage());
      System.out.println("Dot2Dot:  Encountered errors during parse.");
      return false;
    }
  }

  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      graph();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void graph() throws ParseException {
 /*@bgen(jjtree) Graph */
  ASTGraph jjtn000 = new ASTGraph(JJTGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
    jjtn000.setStrictness(false);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRICT:
        jj_consume_token(STRICT);
      jjtn000.setStrictness(true);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
        jj_consume_token(GRAPH);
      jjtn000.setGraphType(ASTGraph.graphType.GRAPH);
        break;
      case DIGRAPH:
        jj_consume_token(DIGRAPH);
      jjtn000.setGraphType(ASTGraph.graphType.DIGRAPH);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
      jjtn000.setId(t.image);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(24);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
      case NODE:
      case EDGE:
      case SUBGRAPH:
      case ID:
      case 24:
        stmt_list();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(25);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void stmt_list() throws ParseException {
    stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
    case NODE:
    case EDGE:
    case SUBGRAPH:
    case ID:
    case 24:
      stmt_list();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
    case NODE:
    case EDGE:
      attr_stmt();
      break;
    case ID:
      simple_node_id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIR_EDGEOP:
      case UNDIR_EDGEOP:
        edge_stmt();
        break;
      case 27:
        assignment_stmt();
        break;
      default:
        jj_la1[6] = jj_gen;
        node_info();
      }
      break;
    case SUBGRAPH:
    case 24:
      subgraph();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIR_EDGEOP:
      case UNDIR_EDGEOP:
        edge_stmt();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void assignment_stmt() throws ParseException {
 /*@bgen(jjtree) AssignStmt */
  ASTAssignStmt jjtn000 = new ASTAssignStmt(JJTASSIGNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(27);
      simple_node_id();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void simple_node_id() throws ParseException {
 /*@bgen(jjtree) IDStmt */
  ASTIDStmt jjtn000 = new ASTIDStmt(JJTIDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setId(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void node_info() throws ParseException {
 /*@bgen(jjtree) NodeInfo */
  ASTNodeInfo jjtn000 = new ASTNodeInfo(JJTNODEINFO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        port();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        attr_list();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void node_id() throws ParseException {
 /*@bgen(jjtree) NodeStmt */
  ASTNodeStmt jjtn000 = new ASTNodeStmt(JJTNODESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
    jjtn000.setNodeId(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        port();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void port() throws ParseException {
 /*@bgen(jjtree) Port */
  ASTPort jjtn000 = new ASTPort(JJTPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t1, t2 = null;
    try {
      jj_consume_token(28);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t1 = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 28:
          jj_consume_token(28);
          t2 = jj_consume_token(DIRECTION);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setPort(t1.image, t2.image);
        break;
      case DIRECTION:
        t1 = jj_consume_token(DIRECTION);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setPort(t1.image);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void attr_list() throws ParseException {
    jj_consume_token(29);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_1;
      }
      attribute();
    }
    jj_consume_token(30);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      attr_list();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void attribute() throws ParseException {
 /*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      t1 = jj_consume_token(ID);
      jj_consume_token(27);
      t2 = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
      case 31:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          jj_consume_token(26);
          break;
        case 31:
          jj_consume_token(31);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setAttrParams(t1.image, t2.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void edge_stmt() throws ParseException {
    edgeRHS();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      attr_list();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void edgeRHS() throws ParseException {
 /*@bgen(jjtree) EdgeStmt */
  ASTEdgeStmt jjtn000 = new ASTEdgeStmt(JJTEDGESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIR_EDGEOP:
        jj_consume_token(DIR_EDGEOP);
      jjtn000.setEdgeType(ASTGraph.graphType.DIGRAPH);
        break;
      case UNDIR_EDGEOP:
        jj_consume_token(UNDIR_EDGEOP);
      jjtn000.setEdgeType(ASTGraph.graphType.GRAPH);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        node_id();
        break;
      case SUBGRAPH:
      case 24:
        subgraph();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIR_EDGEOP:
      case UNDIR_EDGEOP:
        edgeRHS();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void attr_stmt() throws ParseException {
 /*@bgen(jjtree) AttrStmt */
  ASTAttrStmt jjtn000 = new ASTAttrStmt(JJTATTRSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
        jj_consume_token(GRAPH);
        attr_list();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setScope(ASTAttrStmt.attrsScope.GRAPH);
        break;
      case NODE:
        jj_consume_token(NODE);
        attr_list();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setScope(ASTAttrStmt.attrsScope.NODE);
        break;
      case EDGE:
        jj_consume_token(EDGE);
        attr_list();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setScope(ASTAttrStmt.attrsScope.EDGE);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void subgraph() throws ParseException {
 /*@bgen(jjtree) Subgraph */
  ASTSubgraph jjtn000 = new ASTSubgraph(JJTSUBGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUBGRAPH:
        jj_consume_token(SUBGRAPH);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          t = jj_consume_token(ID);
        jjtn000.setId(t.image);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(24);
      stmt_list();
      jj_consume_token(25);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  /** Generated Token Manager. */
  public Dot2DotParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0xc00,0x20000,0x1027400,0x4000000,0x1027400,0x8018000,0x18000,0x1027400,0x10000000,0x20000000,0x10000000,0x10000000,0x820000,0x20000,0x20000000,0x84000000,0x84000000,0x20000000,0x18000,0x1024000,0x18000,0x3400,0x20000,0x4000,};
   }

  /** Constructor with InputStream. */
  public Dot2DotParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Dot2DotParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Dot2DotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Dot2DotParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Dot2DotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Dot2DotParser(Dot2DotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Dot2DotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
