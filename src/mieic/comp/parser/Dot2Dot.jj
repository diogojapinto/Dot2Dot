/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Dot2Dot.jj */
/*@egen*/options{  JDK_VERSION = "1.7";  LOOKAHEAD= 1;  static = false;               }PARSER_BEGIN(Dot2DotParser)package mieic.comp.parser;import java.io.*;public class Dot2DotParser/*@bgen(jjtree)*/implements Dot2DotParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTDot2DotParserState jjtree = new JJTDot2DotParserState();

/*@egen*/  public static boolean parse(String args [])  {    Dot2DotParser parser = null;    if (args.length == 0)    {      System.out.println("Dot2Dot:  Reading from standard input . . .");      parser = new Dot2DotParser(System.in);    }    else if (args.length == 1)    {      System.out.println("Dot2Dot:  Reading from file " + args [0] + " . . .");      try      {        parser = new Dot2DotParser(new java.io.FileInputStream(args [0]));      }      catch (java.io.FileNotFoundException e)      {        System.out.println("Java Parser Version 1.1:  File " + args [0] + " not found.");        return false;      }    }    else    {      System.out.println("Dot2Dot:  Usage is one of:");      System.out.println("         java dot2dot < inputfile");      System.out.println("OR");      System.out.println("         java dot2dot inputfile");      return false;    }    try    {      SimpleNode root = parser.Start();      root.dump("");      return true;    }    catch (ParseException e)    {      System.out.println(e.getMessage());      System.out.println("Dot2Dot:  Encountered errors during parse.");      return false;    }  }}PARSER_END(Dot2DotParser)SKIP :{  " "| "\t"| < "\n\35" ~[ "\n" ] "\n" >| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >| < "#" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < STRICT :    "strict"  | "STRICT" >| < GRAPH :    "graph"  | "GRAPH" >| < DIGRAPH :    "digraph"  | "DIGRAPH" >| < NODE :    "node"  | "NODE" >| < EDGE :    "edge"  | "EDGE" >| < SUBGRAPH :    "subgraph"  | "SUBGRAPH" >| < DIRECTION :    "n"  | "s"  | "w"  | "e"  | "nw"  | "ne"  | "sw"  | "se"  | "c"  | "_" >| < DIR_EDGEOP : "->" >| < UNDIR_EDGEOP : "--" >}TOKEN : /* IDENTIFIERS */{  < ID :    (      < LETTER >      (        < LETTER >      | < DIGIT >      )*    )  | < STRING >  | < NUMERAL >  | < HTML >>| < #LETTER : [ "_", "a"-"z", "A"-"Z", "\200"-"\377" ] >| < #DIGIT : [ "0"-"9" ] >| < #NUMERAL :    ("-")?    (      "." (< DIGIT >)+    | (< DIGIT >)+      (        "." (< DIGIT >)+      )?    ) >| < #STRING :    "\""    (      "\\\""    | ~[ "\"" ]    )+    (      "\""    | "\\\""    ) >| < #HTML :    (      "<"      (        "<" (~[ ">" ])* ">" (~[ "<", ">" ])*      )*      ">"    ) >}SimpleNode Start() :{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  graph()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void graph()        :{/*@bgen(jjtree) Graph */
  ASTGraph jjtn000 = new ASTGraph(JJTGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Graph */
  try {
/*@egen*/  {    jjtn000.setStrictness(false);  }  (    < STRICT >    {      jjtn000.setStrictness(true);    }  )?  (    < GRAPH >    {      jjtn000.setGraphType(ASTGraph.graphType.GRAPH);    }  | < DIGRAPH >    {      jjtn000.setGraphType(ASTGraph.graphType.DIGRAPH);    }  )  (    t = < ID >    {      jjtn000.setId(t.image);    }  )?  "{"  (    (      stmt_list()    )?  )  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void stmt_list()       :{}{  stmt() (";")?  (    stmt_list()  )?}void stmt()       :{}{  attr_stmt()| simple_node_id()  (    edge_stmt()  | assignment_stmt()  | node_info()  )| subgraph()  (    edge_stmt()  )?}void assignment_stmt()             :{/*@bgen(jjtree) AssignStmt */
  ASTAssignStmt jjtn000 = new ASTAssignStmt(JJTASSIGNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AssignStmt */
  try {
/*@egen*/  "=" simple_node_id()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void simple_node_id()           :{/*@bgen(jjtree) NodeStmt */
  ASTNodeStmt jjtn000 = new ASTNodeStmt(JJTNODESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) NodeStmt */
  try {
/*@egen*/  t = < ID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setNodeId(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void node_info()           :{/*@bgen(jjtree) NodeInfo */
  ASTNodeInfo jjtn000 = new ASTNodeInfo(JJTNODEINFO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NodeInfo */
  try {
/*@egen*/  (    port()  )?  (    attr_list()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void node_id()           :{/*@bgen(jjtree) NodeStmt */
 ASTNodeStmt jjtn000 = new ASTNodeStmt(JJTNODESTMT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) NodeStmt */
  try {
/*@egen*/  t = < ID >  {    jjtn000.setNodeId(t.image);  }  (    port()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void port()       :{/*@bgen(jjtree) Port */
  ASTPort jjtn000 = new ASTPort(JJTPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t1, t2 = null;}{/*@bgen(jjtree) Port */
  try {
/*@egen*/  ":"  (    t1 = < ID > (":" t2 = < DIRECTION >)?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {      jjtn000.setPort(t1.image, t2.image);    }  | t1 = < DIRECTION >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {      jjtn000.setPort(t1.image);    }  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void attr_list()       :{}{  "["  (    attribute()  )*  "]"  (    attr_list()  )?}void attribute()            :{/*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t1, t2;}{/*@bgen(jjtree) Attribute */
  try {
/*@egen*/  t1 = < ID > "=" t2 = < ID >  (    ";"  | ","  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setAttrParams(t1.image, t2.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void edge_stmt()       :{}{  edgeRHS()  (    attr_list()  )?}void edgeRHS()           :{/*@bgen(jjtree) EdgeStmt */
  ASTEdgeStmt jjtn000 = new ASTEdgeStmt(JJTEDGESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) EdgeStmt */
  try {
/*@egen*/  (    < DIR_EDGEOP >    {      jjtn000.setEdgeType(ASTGraph.graphType.DIGRAPH);    }  | < UNDIR_EDGEOP >    {      jjtn000.setEdgeType(ASTGraph.graphType.GRAPH);    }  )  (    node_id()  | subgraph()  )  (    edgeRHS()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void attr_stmt()           :{/*@bgen(jjtree) AttrStmt */
  ASTAttrStmt jjtn000 = new ASTAttrStmt(JJTATTRSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AttrStmt */
  try {
/*@egen*/  < GRAPH > attr_list()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setScope(ASTAttrStmt.attrsScope.GRAPH);  }| < NODE > attr_list()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setScope(ASTAttrStmt.attrsScope.NODE);  }| < EDGE > attr_list()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setScope(ASTAttrStmt.attrsScope.EDGE);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void subgraph()           :{/*@bgen(jjtree) Subgraph */
  ASTSubgraph jjtn000 = new ASTSubgraph(JJTSUBGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Subgraph */
  try {
/*@egen*/  (    < SUBGRAPH >    (      t = < ID >      {        jjtn000.setId(t.image);      }    )?  )?  "{" stmt_list() "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}