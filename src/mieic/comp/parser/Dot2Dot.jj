/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Dot2Dot.jj */
/*@egen*/options{  JDK_VERSION = "1.7";  LOOKAHEAD= 1;  static = false;               }PARSER_BEGIN(Dot2DotParser)package mieic.comp.parser;import java.io.*;public class Dot2DotParser/*@bgen(jjtree)*/implements Dot2DotParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTDot2DotParserState jjtree = new JJTDot2DotParserState();

/*@egen*/  public static boolean parse(String args [])  {    Dot2DotParser parser = null;    if (args.length == 0)    {      System.out.println("Dot2Dot:  Reading from standard input . . .");      parser = new Dot2DotParser(System.in);    }    else if (args.length == 1)    {      System.out.println("Dot2Dot:  Reading from file " + args [0] + " . . .");      try      {        parser = new Dot2DotParser(new java.io.FileInputStream(args [0]));      }      catch (java.io.FileNotFoundException e)      {        System.out.println("Java Parser Version 1.1:  File " + args [0] + " not found.");        return false;      }    }    else    {      System.out.println("Dot2Dot:  Usage is one of:");      System.out.println("         java dot2dot < inputfile");      System.out.println("OR");      System.out.println("         java dot2dot inputfile");      return false;    }    try    {      SimpleNode root = parser.Start();      root.dump("");      return true;    }    catch (ParseException e)    {      System.out.println(e.getMessage());      System.out.println("Dot2Dot:  Encountered errors during parse.");      return false;    }  }}PARSER_END(Dot2DotParser)SKIP :{  " "| "\t"| < "\n\35" ~[ "\n" ] "\n" >| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >| < "#" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < STRICT :    "strict"  | "STRICT" >| < GRAPH :    "graph"  | "GRAPH" >| < DIGRAPH :    "digraph"  | "DIGRAPH" >| < NODE :    "node"  | "NODE" >| < EDGE :    "edge"  | "EDGE" >| < SUBGRAPH :    "subgraph"  | "SUBGRAPH" >| < DIRECTION :    "n"  | "s"  | "w"  | "e"  | "nw"  | "ne"  | "sw"  | "se"  | "c"  | "_" >| < EDGEOP :    "--"  | "->" >}TOKEN : /* IDENTIFIERS */{  < ID :    (      < LETTER >      (        < LETTER >      | < DIGIT >      )*    )  | < STRING >  | < NUMERAL >  | < HTML >>| < #LETTER : [ "_", "a"-"z", "A"-"Z", "\200"-"\377" ] >| < #DIGIT : [ "0"-"9" ] >| < #NUMERAL :    ("-")?    (      "." (< DIGIT >)+    | (< DIGIT >)+      (        "." (< DIGIT >)+      )?    ) >| < #STRING :    "\""    (      "\\\""    | ~[ "\"" ]    )+    (      "\""    | "\\\""    ) >| < #HTML :    (      "<"      (        "<" (~[ ">" ])* ">" (~[ "<", ">" ])*      )*      ">"    ) >}SimpleNode Start() :{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  graph()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void graph()        :{/*@bgen(jjtree) Graph */
  ASTGraph jjtn000 = new ASTGraph(JJTGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t1 = null, t2, t3;}{/*@bgen(jjtree) Graph */
  try {
/*@egen*/  (t1 = < STRICT >)?  (    t2 = < GRAPH >  | t2 = < DIGRAPH >  )  (    t3 = < ID >    {      if (t1 != null && t1.image.toLowerCase().equals("strict"))      {        jjtn000.setStrictness(true);      }      switch (t2.image.toLowerCase())      {        case "graph" : jjtn000.setGraphType(ASTGraph.graphType.GRAPH);        break;        case "digraph" : jjtn000.setGraphType(ASTGraph.graphType.DIGRAPH);        break;      }      jjtn000.setId(t3.image);    }  )?  "{"  (    (      stmt_list()    )?  )  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void stmt_list()       :{}{  stmt() (";")?  (    stmt_list()  )?}void stmt()       :{}{/*@bgen(jjtree) AttrStmt */
  {
    ASTAttrStmt jjtn001 = new ASTAttrStmt(JJTATTRSTMT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  attr_stmt()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/          | simple_node_id()(/*@bgen(jjtree) EdgeStmt */
  {
    ASTEdgeStmt jjtn002 = new ASTEdgeStmt(JJTEDGESTMT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/  edge_stmt()/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/          | "="/*@bgen(jjtree) AssignStmt */
      {
        ASTAssignStmt jjtn003 = new ASTAssignStmt(JJTASSIGNSTMT);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ simple_node_id()/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/            |/*@bgen(jjtree) NodeStmt */
  {
    ASTNodeStmt jjtn004 = new ASTNodeStmt(JJTNODESTMT);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/ node_stmt()/*@bgen(jjtree)*/
  } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      throw (RuntimeException)jjte004;
    }
    if (jjte004 instanceof ParseException) {
      throw (ParseException)jjte004;
    }
    throw (Error)jjte004;
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/          )|/*@bgen(jjtree) Subgraph */
{
  ASTSubgraph jjtn005 = new ASTSubgraph(JJTSUBGRAPH);
  boolean jjtc005 = true;
  jjtree.openNodeScope(jjtn005);
}
try {
/*@egen*/(  subgraph()  (    edge_stmt()  )?)/*@bgen(jjtree)*/
} catch (Throwable jjte005) {
  if (jjtc005) {
    jjtree.clearNodeScope(jjtn005);
    jjtc005 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte005 instanceof RuntimeException) {
    throw (RuntimeException)jjte005;
  }
  if (jjte005 instanceof ParseException) {
    throw (ParseException)jjte005;
  }
  throw (Error)jjte005;
} finally {
  if (jjtc005) {
    jjtree.closeNodeScope(jjtn005, true);
  }
}
/*@egen*/          }void simple_node_id()           :{/*@bgen(jjtree) NodeStmt */
 ASTNodeStmt jjtn000 = new ASTNodeStmt(JJTNODESTMT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) NodeStmt */
  try {
/*@egen*/  t1 = < ID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setNodeId(t1.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void node_stmt()       :{}{  (    port()  )?  (    attr_list()  )?}void node_id()       :{}{  < ID >  (    port()  )?}void port()       :{}{  ":"  (    < ID > (":" < DIRECTION >)?  | < DIRECTION >  )}void attr_list()       :{}{  "["  (/*@bgen(jjtree) Attribute */
    {
      ASTAttribute jjtn001 = new ASTAttribute(JJTATTRIBUTE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    attribute()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/           )*  "]"  (    attr_list()  )?}void attribute()       :{}{  < ID > "=" < ID >  (    ";"  | ","  )?}void edge_stmt()       :{}{  edgeRHS()  (    attr_list()  )?}void edgeRHS()       :{}{  < EDGEOP >  (/*@bgen(jjtree) NodeStmt */
    {
      ASTNodeStmt jjtn001 = new ASTNodeStmt(JJTNODESTMT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    node_id()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/            |/*@bgen(jjtree) Subgraph */
    {
      ASTSubgraph jjtn002 = new ASTSubgraph(JJTSUBGRAPH);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ subgraph()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/          )(/*@bgen(jjtree) EdgeStmt */
  {
    ASTEdgeStmt jjtn003 = new ASTEdgeStmt(JJTEDGESTMT);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/  edgeRHS()/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/          )?}void attr_stmt()       :{Token t1;}{  t1 = < GRAPH > attr_list()| t1 = < NODE > attr_list()| t1 = < EDGE > attr_list() {   switch(t1.image.toLowerCase())   {	case "graph":	break;	case "node":	break;	case "edge":	break;   } }}void subgraph()       :{}{  (    < SUBGRAPH > (< ID >)?  )?  "{" stmt_list() "}"}