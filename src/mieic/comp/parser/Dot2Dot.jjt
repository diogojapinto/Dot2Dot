options{  JDK_VERSION = "1.7";  LOOKAHEAD= 1;  static = false;  multi = true;}PARSER_BEGIN(Dot2DotParser)package mieic.comp.parser;import java.io.*;import mieic.comp.graph.Graph;import mieic.comp.parser.ASTGraph.GraphType;public class Dot2DotParser{  public static Graph parse(String arg)  {    Dot2DotParser parser = null;    if (arg == null)    {      System.out.println("Dot2Dot:  Reading from standard input . . .");      parser = new Dot2DotParser(System.in);    }    else    {      System.out.println("Dot2Dot:  Reading from file " + arg + " . . .");      try      {        parser = new Dot2DotParser(new java.io.FileInputStream(arg));      }      catch (java.io.FileNotFoundException e)      {        System.out.println("Java Parser Version 1.1:  File " + arg + " not found.");        return null;      }    } /*    else    {      System.out.println("Dot2Dot:  Usage is one of:");      System.out.println("         java dot2dot < inputfile");      System.out.println("OR");      System.out.println("         java dot2dot inputfile");      return null;    }*/    try    {      SimpleNode root = parser.Start();      root.dump("");      //return new Graph("coiso", GraphType.DIGRAPH, true);      try      {        return root.parseChildren();      }      catch (SemanticException e)      {        System.err.println(e);        return null;      }    }    catch (ParseException e)    {      System.out.println(e.getMessage());      System.out.println("Dot2Dot:  Encountered errors during parse.");      return null;    }  }}PARSER_END(Dot2DotParser)SKIP :{  " "| "\t"| < "\n\35" ~[ "\n" ] "\n" >| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >| < "#" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN :{  < STRICT :    "strict"  | "STRICT" >| < GRAPH :    "graph"  | "GRAPH" >| < DIGRAPH :    "digraph"  | "DIGRAPH" >| < NODE :    "node"  | "NODE" >| < EDGE :    "edge"  | "EDGE" >| < SUBGRAPH :    "subgraph"  | "SUBGRAPH" >| < DIR_EDGEOP : "->" >| < UNDIR_EDGEOP : "--" >| < ID :    (      < LETTER >      (        < LETTER >      | < DIGIT >      )*    )  | < STRING >  | < NUMERAL >  | < HTML >>| < #LETTER : [ "_", "a"-"z", "A"-"Z", "\200"-"\377" ] >| < #DIGIT : [ "0"-"9" ] >| < #NUMERAL :    ("-")?    (      "." (< DIGIT >)+    | (< DIGIT >)+      (        "." (< DIGIT >)+      )?    ) >| < #STRING :    "\""    (      "\\\""    | ~[ "\"" ]    )*     "\"" >| < #HTML :    (       "<"      (        "<" (~[ ">" ])* ">" (~[ "<", ">" ])*      )*      ">"    ) >| < DIRECTION :    "n"  | "s"  | "w"  | "e"  | "nw"  | "ne"  | "sw"  | "se"  | "c"  | "_" >}SimpleNode Start() :{}{  graph()  {    return jjtThis;  }}void graph() #Graph :{  Token t;}{  {    jjtThis.setStrictness(false);  }  (    < STRICT >    {      jjtThis.setStrictness(true);    }  )?  (    < GRAPH >    {      jjtThis.setGraphType(ASTGraph.GraphType.GRAPH);    }  | < DIGRAPH >    {      jjtThis.setGraphType(ASTGraph.GraphType.DIGRAPH);    }  )  (    t = < ID >    {      jjtThis.setId(t.image);    }  )?  "{"  (    (      stmt_list()    )?  )  "}"}void stmt_list() #void :{}{  stmt() (";")?  (    stmt_list()  )?}void stmt() #void :{}{  attr_stmt()| simple_node_id()  (    edge_stmt()  | assignment_stmt()  | node_info()  )| subgraph()  (    edge_stmt()  )?}void assignment_stmt() #AssignStmt :{}{  "=" simple_node_id()}void simple_node_id() #IDStmt :{  Token t;}{  t = < ID >  {    jjtThis.setId(t.image);  }}void node_info() #NodeInfo :{}{  (    port()  )?  (    attr_list()  )?}void node_id() #NodeStmt :{  Token t;}{  t = < ID >  {    jjtThis.setNodeId(t.image);  }  (    port()  )?}void port() #Port :{  Token t1, t2 = null;}{  ":"  (    t1 = < ID > (":" t2 = < DIRECTION >)?    {      jjtThis.setPort(t1.image, t2.image);    }  | t1 = < DIRECTION >    {      jjtThis.setPort(t1.image);    }  )}void attr_list() #void :{}{  "["  (    attribute()  )*  "]"  (    attr_list()  )?}void attribute() #Attribute :{  Token t1, t2;}{  t1 = < ID > "=" t2 = < ID >  (    ";"  | ","  )?  {    jjtThis.setAttrParams(t1.image, t2.image);  }}void edge_stmt() #void :{}{  edgeRHS()  (    attr_list()  )?}void edgeRHS() #EdgeStmt :{}{  (    < DIR_EDGEOP >    {      jjtThis.setEdgeType(ASTGraph.GraphType.DIGRAPH);    }  | < UNDIR_EDGEOP >    {      jjtThis.setEdgeType(ASTGraph.GraphType.GRAPH);    }  )  (    node_id()  | subgraph()  )  (    edgeRHS()  )?}void attr_stmt() #AttrStmt :{}{  < GRAPH > attr_list()  {    jjtThis.setScope(ASTAttrStmt.attrsScope.GRAPH);  }| < NODE > attr_list()  {    jjtThis.setScope(ASTAttrStmt.attrsScope.NODE);  }| < EDGE > attr_list()  {    jjtThis.setScope(ASTAttrStmt.attrsScope.EDGE);  }}void subgraph() #Subgraph :{  Token t;}{  (    < SUBGRAPH >    (      t = < ID >      {        jjtThis.setId(t.image);      }    )?  )?  "{" stmt_list() "}"}