options{  JDK_VERSION = "1.7";  LOOKAHEAD= 1;  static = false;  multi = true;}PARSER_BEGIN(Dot2DotParser)package mieic.comp.parser;import java.io.*;public class Dot2DotParser{  public static boolean parse(String args [])  {    Dot2DotParser parser = null;    if (args.length == 0)    {      System.out.println("Dot2Dot:  Reading from standard input . . .");      parser = new Dot2DotParser(System.in);    }    else if (args.length == 1)    {      System.out.println("Dot2Dot:  Reading from file " + args [0] + " . . .");      try      {        parser = new Dot2DotParser(new java.io.FileInputStream(args [0]));      }      catch (java.io.FileNotFoundException e)      {        System.out.println("Java Parser Version 1.1:  File " + args [0] + " not found.");        return false;      }    }    else    {      System.out.println("Dot2Dot:  Usage is one of:");      System.out.println("         java dot2dot < inputfile");      System.out.println("OR");      System.out.println("         java dot2dot inputfile");      return false;    }    try    {      SimpleNode root = parser.Start();      root.dump("");      return true;    }    catch (ParseException e)    {      System.out.println(e.getMessage());      System.out.println("Dot2Dot:  Encountered errors during parse.");      return false;    }  }}PARSER_END(Dot2DotParser)SKIP :{  " "| "\t"| < "\n\35" ~[ "\n" ] "\n" >| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >| < "#" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < STRICT :    "strict"  | "STRICT" >| < GRAPH :    "graph"  | "GRAPH" >| < DIGRAPH :    "digraph"  | "DIGRAPH" >| < NODE :    "node"  | "NODE" >| < EDGE :    "edge"  | "EDGE" >| < SUBGRAPH :    "subgraph"  | "SUBGRAPH" >| < DIRECTION :    "n"  | "s"  | "w"  | "e"  | "nw"  | "ne"  | "sw"  | "se"  | "c"  | "_" >| < EDGEOP :    "--"  | "->" >}TOKEN : /* IDENTIFIERS */{  < ID :    (      < LETTER >      (        < LETTER >      | < DIGIT >      )*    )  | < STRING >  | < NUMERAL >  | < HTML >>| < #LETTER : [ "_", "a"-"z", "A"-"Z", "\200"-"\377" ] >| < #DIGIT : [ "0"-"9" ] >| < #NUMERAL :    ("-")?    (      "." (< DIGIT >)+    | (< DIGIT >)+      (        "." (< DIGIT >)+      )?    ) >| < #STRING :    "\""    (      "\\\""    | ~[ "\"" ]    )+    (      "\""    | "\\\""    ) >| < #HTML :    (      "<"      (        "<" (~[ ">" ])* ">" (~[ "<", ">" ])*      )*      ">"    ) >}SimpleNode Start() :{}{  graph()  {    return jjtThis;  }}void graph() #Graph :{  Token t1 = null, t2, t3;}{  (t1 = < STRICT >)?  (    t2 = < GRAPH >  | t2 = < DIGRAPH >  )  (    t3 = < ID >    {      if (t1 != null && t1.image.toLowerCase().equals("strict"))      {        jjtThis.setStrictness(true);      }      switch (t2.image.toLowerCase())      {        case "graph" : jjtThis.setGraphType(ASTGraph.graphType.GRAPH);        break;        case "digraph" : jjtThis.setGraphType(ASTGraph.graphType.DIGRAPH);        break;      }      jjtThis.setId(t3.image);    }  )?  "{"  (    (      stmt_list()    )?  )  "}"}void stmt_list() #void :{}{  stmt() (";")?  (    stmt_list()  )?}void stmt() #void :{}{  attr_stmt() #AttrStmt| simple_node_id()(  edge_stmt() #EdgeStmt| "=" simple_node_id() #AssignStmt| node_stmt() #NodeStmt)|(  subgraph()  (    edge_stmt()  )?) #Subgraph}void simple_node_id() #NodeStmt :{Token t1;}{  t1 = < ID >  {    jjtThis.setNodeId(t1.image);  }}void node_stmt() #void :{}{  (    port()  )?  (    attr_list()  )?}void node_id() #void :{}{  < ID >  (    port()  )?}void port() #void :{}{  ":"  (    < ID > (":" < DIRECTION >)?  | < DIRECTION >  )}void attr_list() #void :{}{  "["  (    attribute() #Attribute)*  "]"  (    attr_list()  )?}void attribute() #void :{}{  < ID > "=" < ID >  (    ";"  | ","  )?}void edge_stmt() #void :{}{  edgeRHS()  (    attr_list()  )?}void edgeRHS() #void :{}{  < EDGEOP >  (    node_id() #NodeStmt  | subgraph() #Subgraph)(  edgeRHS() #EdgeStmt)?}void attr_stmt() #void :{Token t1;}{  t1 = < GRAPH > attr_list()| t1 = < NODE > attr_list()| t1 = < EDGE > attr_list() {   switch(t1.image.toLowerCase())   {	case "graph":	break;	case "node":	break;	case "edge":	break;   } }}void subgraph() #void :{}{  (    < SUBGRAPH > (< ID >)?  )?  "{" stmt_list() "}"}