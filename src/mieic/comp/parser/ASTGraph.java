/* Generated By:JJTree: Do not edit this line. ASTGraph.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package mieic.comp.parser;

import mieic.comp.graph.AttributeAlreadyDefinedException;
import mieic.comp.graph.Edge;
import mieic.comp.graph.Graph;
import mieic.comp.graph.Subgraph;
import mieic.comp.graph.Vertex;

public class ASTGraph extends SimpleNode {

	public enum GraphType {
		DIGRAPH, GRAPH
	};

	/*
	 * static so the subgraphs also have this attribute correctly setted
	 */
	private static boolean isStrict = false;
	private String graphId;
	private static GraphType type;

	public ASTGraph(int id) {
		super(id);
		graphId = null;
	}

	public ASTGraph(Dot2DotParser p, int id) {
		super(p, id);
		graphId = null;
	}

	@Override
	public void dump(String prefix) {
		String typeStr = "";
		switch (type) {
		case GRAPH:
			typeStr = "graph";
			break;
		case DIGRAPH:
			typeStr = "digraph";
			break;
		}
		System.out.println(toString(prefix) + ": " + typeStr + " " + graphId);
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}

	public static void setStrictness(boolean isStrict) {
		ASTGraph.isStrict = isStrict;
	}

	public void setId(String id) {
		graphId = id;
	}

	public static void setGraphType(GraphType type) {
		ASTGraph.type = type;
	}

	public String getGraphId() {
		return graphId;
	}

	public Graph parse(Graph parentGraph) throws SemanticException {
		Graph graph;

		if (parentGraph == null) {
			graph = new Graph(graphId, type, isStrict);
		} else {
			graph = new Subgraph(graphId, parentGraph);
		}

		for (int i = 0; i < children.length; i++) {
			Node currNode = children[i];
			if (currNode instanceof ASTIDStmt) {
				if (++i < children.length) {
					Node nextNode = children[i];
					if (nextNode instanceof ASTEdgeStmt) {
						try {
							Vertex v = new Vertex(
									((ASTIDStmt) currNode).getId());

							v = graph.addVertex(v);

							Edge edge = ((ASTEdgeStmt) nextNode)
									.parse(graph, v);

							if (++i < children.length) {
								for (; i < children.length
										&& children[i] instanceof ASTAttribute; i++) {
									String[] attr = ((ASTAttribute) children[i])
											.getAttrParams();
									edge.addAttribute(attr[0], attr[1]);
								}
							}
							i--;

						} catch (AttributeAlreadyDefinedException e) {
							e.printStackTrace();
						}
					} else if (nextNode instanceof ASTAssignStmt) {
						((ASTAssignStmt) nextNode).parse(graph,
								((ASTIDStmt) currNode).getId());
					} else if (nextNode instanceof ASTNodeInfo) {
						try {
							Vertex v = new Vertex(
									((ASTIDStmt) currNode).getId());
							((ASTNodeInfo) nextNode).parse(v);
						} catch (AttributeAlreadyDefinedException e) {
							e.printStackTrace();
						}
					}
				} else {
					Vertex v;
					try {
						v = new Vertex(((ASTIDStmt) currNode).getId());
						v = graph.addVertex(v);
					} catch (AttributeAlreadyDefinedException e) {
						e.printStackTrace();
					}
				}
			} else if (currNode instanceof ASTSubgraph) {

				Subgraph subgraph = (Subgraph) ((ASTSubgraph) currNode)
						.parse(graph);

				graph.addSubgraph(subgraph);

				if (++i < children.length) {
					Node nextNode = children[i];
					if (nextNode instanceof ASTEdgeStmt) {

						try {
							((ASTEdgeStmt) nextNode).parse(graph, subgraph);
						} catch (AttributeAlreadyDefinedException e) {
							e.printStackTrace();
						}
					} else {
						i--;
					}
				}
			} else if (currNode instanceof ASTAttrStmt) {
				if (currNode instanceof ASTAttribute) {
					// TODO
				}
			} else if (currNode instanceof ASTAttribute) {

			} else {
				throw new SemanticException(
						"Invalid statement: expecting an ID or subgraph");
			}
		}
		return graph;
	}
}
/*
 * JavaCC - OriginalChecksum=607c7e8727f17690d2a8795c5a405121 (do not edit this
 * line)
 */
