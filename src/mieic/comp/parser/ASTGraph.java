/* Generated By:JJTree: Do not edit this line. ASTGraph.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package mieic.comp.parser;

public class ASTGraph extends SimpleNode {

	public enum graphType {DIGRAPH, GRAPH};

	private boolean isStrict = false;
	private String graphId;
	private graphType type;
	

	public ASTGraph(int id) {
		super(id);
	}

	public ASTGraph(Dot2DotParser p, int id) {
		super(p, id);
	}

	@Override
	public void dump(String prefix) {
		String typeStr = "";
		switch(type) {
		case GRAPH:
			typeStr = "graph";
			break;
		case DIGRAPH:
			typeStr = "digraph";
			break;
		}
		System.out.println(toString(prefix) + ": " + typeStr + " " + graphId);
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}

	public void setStrictness(boolean isStrict) {
		this.isStrict = isStrict;
	}

	public void setId(String id) {
		graphId = id;
	}
	
	public void setGraphType(graphType type) {
		this.type = type;
	}

}
/*
 * JavaCC - OriginalChecksum=607c7e8727f17690d2a8795c5a405121 (do not edit this
 * line)
 */
