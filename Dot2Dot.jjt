options{  JDK_VERSION = "1.7";  LOOKAHEAD= 1;  static = false;  multi = true;}PARSER_BEGIN(Dot2DotParser)package mieic.comp;import java.io.*;public class Dot2DotParser{  public static void main(String args [])  {    Dot2DotParser parser = null;    if (args.length == 0)    {      System.out.println("Dot2Dot:  Reading from standard input . . .");      parser = new Dot2DotParser(System.in);    }    else if (args.length == 1)    {      System.out.println("Dot2Dot:  Reading from file " + args [0] + " . . .");      try      {        parser = new Dot2DotParser(new java.io.FileInputStream(args [0]));      }      catch (java.io.FileNotFoundException e)      {        System.out.println("Java Parser Version 1.1:  File " + args [0] + " not found.");        return;      }    }    else    {      System.out.println("Dot2Dot:  Usage is one of:");      System.out.println("         java dot2dot < inputfile");      System.out.println("OR");      System.out.println("         java dot2dot inputfile");      return;    }    try    {      /*parser.CompilationUnit();
      System.out.println("Dot2Dot:  Java program parsed successfully.");*/      SimpleNode root = parser.Start();      root.dump("");    }    catch (ParseException e)    {      System.out.println(e.getMessage());      System.out.println("Dot2Dot:  Encountered errors during parse.");    }  }}PARSER_END(Dot2DotParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < STRICT :    "strict"  | "STRICT" >| < GRAPH :    "graph"  | "GRAPH" >| < DIGRAPH :    "digraph"  | "DIGRAPH" >| < NODE :    "node"  | "NODE" >| < EDGE :    "edge"  | "EDGE" >| < SUBGRAPH :    "subgraph"  | "SUBGRAPH" >| < DIRECTION :    "n"  | "s"  | "w"  | "e"  | "nw"  | "ne"  | "sw"  | "se"  | "_" >| < EDGEOP :    "--"  | "->" >}TOKEN : /* IDENTIFIERS */{  < ID :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}SimpleNode Start() :{}{  graph()  {    return jjtThis;  }}void graph() :{}{  (< STRICT >)?  (    < GRAPH >  | < DIGRAPH >  )  (< ID >)? "{"  (    (      stmt_list()    )?  )  "}"}void stmt_list() :{}{  stmt() (";")?  (    stmt_list()  )?}void stmt() :{}{  /*node_stmt()| edge_stmt()| attr_stmt()| < ID > "=" < ID >| subgraph()*/	< ID > ( edge_stmt() | (port())? node_stmt())|  subgraph() (edge_stmt())?}void node_stmt() :{}{  /*node_id()*/  (    attr_list()   )?}void node_id() :{}{  < ID >  (    port()  )?}void port() :{}{  ":"  (    < ID > (":" < DIRECTION >)?  | < DIRECTION >  )}void attr_list() :{}{  "["  (    a_list()  )?  "]"  (    attr_list()  )?}void a_list() :{}{  < ID > "=" < ID >  (    ";"  | ","  )?  (    a_list()  )?}void edge_stmt() :{}{  /*(    node_id()  | subgraph()  )*/  edgeRHS()  (    attr_list()  )?}void edgeRHS() :{}{  < EDGEOP >  (    node_id()  | subgraph()  )  (    edgeRHS()  )?}void attr_stmt() :{}{  < GRAPH > attr_list()| < NODE > attr_list()| < EDGE > attr_list()}void subgraph() :{}{  (    < SUBGRAPH > (< ID >)?  )?  "{" stmt_list() "}"}